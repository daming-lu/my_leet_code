__author__ = 'daming'
import collections
import time
# Definition for a  binary tree node
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution:
    # @param root, a tree node
    # @return a list of lists of integers
    def zigzagLevelOrder(self, root):
        if root is None:
            return []

        queue = [root]
        cur_row_count = 1
        cur_row_num = 1

        ans = []
        nextRowHasElemToDisp = True

        while len(queue) > 0 and nextRowHasElemToDisp:
            itr = 0
            cur_row = []
            hasElemToDisp = False
            # print "\n",

            while itr < cur_row_count:
                cur_node = queue.pop(0)
                if cur_node is None:
                    queue.append(None)
                    queue.append(None)
                else:
                    if cur_node.left is not None or cur_node.right is not None:
                        nextRowHasElemToDisp = True
                    queue.append(cur_node.left)
                    queue.append(cur_node.right)
                    hasElemToDisp = True

                    if cur_row_num%2==0:
                        cur_row.insert(0,cur_node.val)
                    else:
                        cur_row.append(cur_node.val)
                itr += 1

            cur_row_count *= 2
            if hasElemToDisp is False:
                break
            ans.append(cur_row)
            cur_row_num += 1
        return ans

def construct_BST(val_list):
    nodes = []
    for v in val_list:
        if v == "#":
            nodes.append(None)
        else:
            nodes.append(TreeNode(v))

    for i in range(len(nodes)):
        if nodes[i] is None:
            continue
        if i*2+1 < len(nodes) and nodes[i*2+1] is not None:
            nodes[i].left = nodes[i*2+1]
        if i*2+2 < len(nodes) and nodes[i*2+2] is not None:
            nodes[i].right = nodes[i*2+2]

    return nodes[0]

def disp_bst_by_levels(root):
        queue = [root]
        cur_row_count = 1

        while len(queue) > 0:
            itr = 0
            cur_row = []
            hasElemToDisp = False
            print "\n",
            while itr < cur_row_count:
                cur_node = queue.pop(0)
                if cur_node is None:
                    queue.append(None)
                    queue.append(None)
                else:
                    queue.append(cur_node.left)
                    queue.append(cur_node.right)
                    hasElemToDisp = True

                cur_row.append(cur_node)
                itr += 1

            cur_row_count *= 2
            if hasElemToDisp:
                for elem in cur_row:
                    if elem is None:
                        print "# ",
                    else:
                        print elem.val," ",
            else:
                break

#
# root = construct_BST([3,9,20,'#','#',15,7])
# print root.val
# disp_bst_by_levels(root)
#

# disp_bst_by_levels(root)

t0 = time.time()

l = ['69', '73', '68', '18', '20', '18', '39', '7', '-3', '13', '-1', '42', '5', '93', '70', '63', '17', '#', '91', '-4', '30', '#', '-1', '64', '-4', '16', '49', '48', '78', '51', '43', '92', '45', '#', '53', '9', '36', '80', '-6', '58', '78', '#', '#', '41', '81', '89', '67', '71', '#', '25', '#', '82', '54', '28', '14', '61', '57', '35', '5', '83', '9', '18', '#', '-9', '-9', '50', '92', '93', '#', '0', '80', '62', '1', '28', '29', '27', '89', '21', '#', '85', '-9', '#', '56', '56', '-9', '#', '#', '43', '#', '29', '97', '-7', '#', '35', '25', '90', '67', '53', '18', '61', '7', '23', '81', '37', '19', '26', '2', '0', '19', '#', '#', '77', '37', '-2', '#', '49', '39', '28', '1', '37', '11', '87', '83', '68', '55', '53', '33', '-2', '22', '7', '52', '#', '14', '#', '18', '50', '97', '-8', '-7', '#', '21', '59', '72', '27', '#', '64', '#', '#', '47', '#', '#', '38', '46', '#', '#', '99', '#', '#', '48', '13', '85', '78', '7', '64', '43', '59', '71', '11', '37', '12', '37', '50', '2', '#', '#', '89', '87', '#', '78', '97', '#', '31', '86', '37', '96', '34', '38', '6', '36', '#', '#', '99', '63', '#', '12', '#', '82', '#', '81', '70', '19', '#', '81', '32', '#', '#', '#', '#', '79', '10', '#', '91', '48', '-3', '94', '65', '#', '20', '26', '96', '21', '92', '91', '#', '89', '9', '74', '#', '#', '96', '#', '64', '67', '50', '96', '#', '#', '#', '#', '#', '#', '40', '78', '#', '27', '3', '17', '#', '#', '2', '45', '#', '#', '#', '#', '#', '13', '#', '#', '17', '45', '69', '30', '#', '#', '43', '#', '4', '13', '-6', '66', '6', '#', '16', '48', '55', '98', '69', '57', '#', '5', '9', '65', '-9', '55', '2', '#', '#', '#', '#', '#', '#', '68', '#', '#', '#', '5', '61', '51', '#', '#', '32', '43', '#', '35', '20', '#', '-7', '38', '30', '1', '80', '#', '#', '42', '86', '42', '#', '#', '#', '#', '47', '#', '#', '#', '62', '29', '-9', '83', '60', '71', '48', '#', '24', '#', '76', '6', '65', '18', '95', '29', '11', '#', '38', '#', '#', '#', '#', '21', '3', '6', '23', '36', '#', '45', '#', '34', '#', '#', '#', '#', '#', '#', '41', '#', '57', '13', '18', '92', '43', '83', '#', '#', '#', '#', '#', '#', '#', '2', '-4', '97', '#', '93', '#', '62', '#', '#', '48', '18', '71', '92', '53', '89', '#', '#', '#', '95', '#', '16', '#', '#', '#', '83', '87', '5', '#', '#', '3', '-8', '-4', '65', '#', '#', '#', '22', '#', '31', '#', '#', '#', '63', '#', '#', '62', '#', '57', '12', '85', '45', '23', '55', '#', '#', '#', '81', '83', '23', '#', '3', '#', '83', '#', '-4', '#', '#', '#', '#', '#', '64', '#', '15', '50', '57', '#', '#', '#', '4', '#', '#', '#', '29', '#', '#', '87', '#', '22', '92', '#', '#', '67', '90', '#', '93', '47', '46', '#', '#', '#', '28', '72', '18', '59', '25', '3', '74', '#', '#', '#', '-5', '28', '-1', '61', '15', '#', '#', '#', '#', '79', '#', '16', '#', '#', '59', '47', '-7', '98', '31', '50', '#', '#', '#', '#', '19', '#', '93', '#', '22', '#', '#', '-5', '40', '#', '#', '#', '75', '30', '#', '7', '53', '76', '#', '#', '#', '#', '#', '68', '19', '#', '63', '41', '91', '#', '43', '#', '49', '#', '#', '#', '#', '#', '46', '#', '#', '87', '74', '49', '1', '21', '62', '6', '34', '77', '#', '#', '#', '#', '#', '#', '-9', '61', '#', '#', '#', '7', '#', '45', '#', '#', '63', '#', '#', '7', '#', '#', '16', '86', '#', '#', '63', '#', '61', '72', '#', '13', '#', '24', '91', '#', '#', '59', '#', '#', '48', '14', '77', '#', '#', '#', '#', '92', '#', '#', '#', '#', '#', '#', '84', '#', '#', '76', '82', '63', '84', '84', '94', '#', '#', '#', '#', '#', '47', '40', '#', '#', '#', '#', '75', '20', '#', '#', '#', '-9', '#', '#', '24', '74', '#', '51', '#', '#', '91', '#', '83', '17', '#', '#', '#', '42', '49', '88', '57', '85', '1', '#', '94', '#', '28', '36', '78', '#', '53', '#', '27', '25', '46', '97', '58', '#', '#', '#', '#', '#', '#', '#', '#', '12', '33', '#', '#', '6', '#', '#', '#', '87', '#', '#', '#', '#', '#', '#', '#', '9', '#', '83', '#', '#', '#', '90', '11', '#', '61', '#', '89', '#', '46', '#', '86', '81', '#', '#', '#', '#', '#', '#', '#', '53', '#', '#', '59', '#', '#', '#', '#', '#', '#', '#', '29', '#', '47', '97', '0', '#', '#', '#', '#', '9', '#', '17', '#', '91', '45', '9', '61', '21', '#', '#', '64', '#', '69', '#', '44', '#', '#', '#', '#', '12', '#', '2', '-8', '88', '#', '#', '#', '#', '#', '-8', '#', '93', '#', '#', '#', '86', '#', '#', '97', '#', '#', '#', '#', '72', '#', '#', '#', '#', '#', '50', '#', '#', '#', '#', '#', '47', '70', '#', '62', '#', '-3', '-5', '59', '15', '#', '-3', '37', '#', '#', '#', '#', '20', '-2', '#', '8', '90', '#', '#', '#', '61', '#', '#', '#', '#', '#', '#', '#', '15', '12', '95', '#', '#', '73', '11', '76', '76', '49', '#', '#', '51', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '42', '#', '#', '-9', '#', '#', '#', '#', '#', '#', '#', '#', '80', '#', '#', '70', '31', '78', '98', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '7', '#', '#', '#', '#', '57', '#', '#', '#', '#', '-3', '#', '#', '-7', '#', '31', '42', '#', '#', '#', '#', '62', '17', '7', '#', '#', '63', '#', '#', '#', '#', '83', '51', '#', '76', '77', '#', '#', '40', '#', '#', '95', '#', '27', '55', '61', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '95', '#', '93', '19', '#', '37', '#', '73', '#', '#', '#', '#', '#', '75', '#', '#', '#', '#', '#', '22', '#', '#', '#', '#', '#', '-7', '99', '#', '#', '#', '#', '#', '94', '63', '#', '#', '#', '#', '#', '#', '#', '39', '77', '#', '-2', '15', '#', '69', '33', '9', '#', '#', '#', '#', '#', '#', '#', '#', '#', '42', '#', '#', '#', '69', '35', '#', '36', '#', '11', '#', '#', '#', '52', '#', '#', '#', '#', '#', '#', '#', '51', '50', '#', '#', '#', '#', '#', '#', '30', '#', '#', '#', '#', '#', '63', '#', '#', '#', '#', '#', '#', '56', '28']
root = construct_BST(l)
obj = Solution()
print obj.zigzagLevelOrder(root)

t1 = time.time()

print 'total time : ', t1-t0
